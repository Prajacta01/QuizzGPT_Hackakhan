{"ast":null,"code":"var _jsxFileName = \"/Users/prajacta/Desktop/hackakhan/flashcards_website/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [outputText, setOutputText] = useState('');\n  const [questionAnswerText, setQuestionAnswerText] = useState('');\n  const [cardsList, setCardsList] = useState(null);\n  const apiKey = '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';\n  const model = 'text-davinci-003';\n  const handleInputChange = e => {\n    setInputText(e.target.value);\n  };\n  const askChatGpt = async prompt => {\n    console.log(prompt);\n    try {\n      const response = await fetch('https://api.openai.com/v1/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          prompt,\n          model,\n          max_tokens: 1000\n        })\n      });\n      const data = await response.json();\n      console.log(data, 'bark');\n      return data.choices[0].text;\n    } catch (error) {\n      console.log('Error', error);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"yaaaaaaaaay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1WLcdj3QFk9ilQTBFmvzFP8RhU8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","logo","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","outputText","setOutputText","questionAnswerText","setQuestionAnswerText","cardsList","setCardsList","apiKey","model","handleInputChange","e","target","value","askChatGpt","prompt","console","log","response","fetch","method","headers","body","JSON","stringify","max_tokens","data","json","choices","text","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/prajacta/Desktop/hackakhan/flashcards_website/src/App.js"],"sourcesContent":["import React, {useState} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [inputText, setInputText] = useState('')\n  const [outputText, setOutputText] = useState('')\n  const [questionAnswerText, setQuestionAnswerText] = useState('')\n  const [cardsList, setCardsList] = useState(null)\n\n  const apiKey = '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'\n  const model = 'text-davinci-003'\n\n  const handleInputChange = (e) => {\n    setInputText(e.target.value);\n  };\n\n  const askChatGpt = async (prompt) => {\n    console.log(prompt)\n\n    try {\n      const response = await fetch ('https://api.openai.com/v1/completions',{\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          prompt,\n          model,\n          max_tokens: 1000\n        })\n      });\n      const data = await response.json();\n      console.log(data, 'bark')\n\n      return data.choices[0].text\n    } catch (error) {\n      console.log('Error', error);\n    }\n    return null\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>yaaaaaaaaay</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMc,MAAM,GAAG,qDAAqD;EACpE,MAAMC,KAAK,GAAG,kBAAkB;EAEhC,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC/BV,YAAY,CAACU,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,UAAU,GAAG,MAAOC,MAAM,IAAK;IACnCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IAEnB,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAuC,EAAC;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASb,MAAO;QACpC,CAAC;QACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBT,MAAM;UACNN,KAAK;UACLgB,UAAU,EAAE;QACd,CAAC;MACH,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCX,OAAO,CAACC,GAAG,CAACS,IAAI,EAAE,MAAM,CAAC;MAEzB,OAAOA,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;IAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdd,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEa,KAAK,CAAC;IAC7B;IACA,OAAO,IAAI;EAEb,CAAC;EAED,oBACEjC,OAAA;IAAKkC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBnC,OAAA;MAAQkC,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5BnC,OAAA;QAAAmC,QAAA,EAAG;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACrC,EAAA,CA/CQD,GAAG;AAAAuC,EAAA,GAAHvC,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}